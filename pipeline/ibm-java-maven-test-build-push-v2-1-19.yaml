apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  annotations:
    app.openshift.io/description: 'Executes build, test, and sonarscan logic for a Java maven application'
    app.openshift.io/vcs-ref: master
    app.openshift.io/vcs-uri: 'https://github.com/IBM/ibm-garage-tekton-tasks'
    description: 'Executes build, test, and sonarscan logic for a Java maven application'
  name: ibm-java-maven-test-build-push-v2-1-19
  labels:
    version: 2.1.19
spec:
  params:
    - name: git-url
      type: string
    - default: master
      name: git-revision
      type: string
    - default: /source
      name: source-dir
      type: string
    - default: my-java-maven-app
      name: app-name
      type: string
    - default: 'maven:3.6.3-jdk-11-slim'
      name: maven-image
      type: string
    - default: target
      name: sonarqube-java-bin-path
      type: string
    - default: sonarsource/sonar-scanner-cli
      name: sonarqube-cli
      type: string
    - name: image-server
      default: ""
    - name: image-namespace
      default: ""
    - name: image-repository
      default: ""
    - name: image-tag
      default: ""
    - name: BUILDER_IMAGE
      default: quay.io/buildah/stable:v1.15.0
    - name: DOCKERFILE
      default: ./Dockerfile
    - name: CONTEXT
      default: .
    - name: TLSVERIFY
      default: "false"
    - name: FORMAT
      default: "docker"
    - name: STORAGE_DRIVER
      description: Set buildah storage driver
      default: overlay      
    - name: image-from
      default: ""
  stepTemplate:
    name: ''
    resources: {}
    volumeMounts:
      - mountPath: $(params.source-dir)
        name: source
  steps:
    - env:
        - name: GIT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: git-credentials
              optional: true
        - name: GIT_USERNAME
          valueFrom:
            secretKeyRef:
              key: username
              name: git-credentials
              optional: true
      image: alpine/git
      name: git-clone
      resources: {}
      script: |
        set +x
        if [[ -n "${GIT_USERNAME}" ]] && [[ -n "${GIT_PASSWORD}" ]]; then
            git clone "https://${GIT_USERNAME}:${GIT_PASSWORD}@$(echo $(params.git-url) | awk -F 'https://' '{print $2}')" $(params.source-dir)
        else
            set -x
            git clone $(params.git-url) $(params.source-dir)
        fi
        set -x
        cd $(params.source-dir)
        git checkout $(params.git-revision)
    - image: $(params.maven-image)
      name: build
      resources: {}
      script: |
        mvn package
      workingDir: $(params.source-dir)
    - image: $(params.maven-image)
      name: test
      resources: {}
      script: |
        mvn test
      workingDir: $(params.source-dir)
    - env:
        - name: SONAR_USER_HOME
          value: $(params.source-dir)
        - name: SONARQUBE_URL
          valueFrom:
            secretKeyRef:
              key: SONARQUBE_URL
              name: sonarqube-access
              optional: true
        - name: SONARQUBE_USER
          valueFrom:
            secretKeyRef:
              key: SONARQUBE_USER
              name: sonarqube-access
              optional: true
        - name: SONARQUBE_PASSWORD
          valueFrom:
            secretKeyRef:
              key: SONARQUBE_PASSWORD
              name: sonarqube-access
              optional: true
      image: $(params.sonarqube-cli)
      name: sonar-scan
      resources: {}
      script: |
        APP_NAME=$(params.app-name)
        SONARQUBE_JAVA_BINARIES_PATH="$(params.sonarqube-java-bin-path)"

        if ! command -v sonar-scanner &> /dev/null
        then
            echo "Skipping SonarQube step, no task defined"
            exit 0
        fi

        if [ -n "${SONARQUBE_URL}" ]; then

          sonar-scanner \
          -Dsonar.login=${SONARQUBE_USER} \
          -Dsonar.password=${SONARQUBE_PASSWORD} \
          -Dsonar.host.url=${SONARQUBE_URL} \
          -Dsonar.projectKey=${APP_NAME} \
          -Dsonar.java.binaries=${SONARQUBE_JAVA_BINARIES_PATH}

        else
            echo "Skipping Sonar Qube step for now but include"
        fi
      workingDir: $(params.source-dir)
    - name: build-push-imagge
      image: $(params.BUILDER_IMAGE)
      workingdir: $(params.source-dir)
      env:
        - name: REGISTRY_USER
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_USER
              optional: true
        - name: REGISTRY_PASSWORD
          valueFrom:
            secretKeyRef:
              name: registry-access
              key: REGISTRY_PASSWORD
              optional: true
      volumeMounts:
        - mountPath: /var/lib/containers
          name: varlibcontainers
      securityContext:
        privileged: true
      script: |
        APP_IMAGE="$(params.image-to):$(params.image-tag)"
        # APP_IMAGE="$(params.image-server)/$(params.image-namespace)/$(params.image-repository):$(params.image-tag)"
        buildah --layers --storage-driver=$(params.STORAGE_DRIVER) bud --format=$(params.FORMAT) --tls-verify=$(params.TLSVERIFY) -f $(params.DOCKERFILE) -t ${APP_IMAGE} $(params.CONTEXT)
        set +x
        if [[ -n "${REGISTRY_USER}" ]] && [[ -n "${REGISTRY_PASSWORD}" ]]; then
          buildah login -u "${REGISTRY_USER}" -p "${REGISTRY_PASSWORD}" "$(params.image-server)"
          echo "buildah login -u "${REGISTRY_USER}" -p "xxxxx" "$(params.image-server)""
        fi
        set -x
        buildah --storage-driver=$(params.STORAGE_DRIVER) push --tls-verify=$(params.TLSVERIFY) --digestfile ./image-digest ${APP_IMAGE} docker://${APP_IMAGE}      
  volumes:
    - emptyDir: {}
      name: source
    - name: varlibcontainers
      emptyDir: {}      
